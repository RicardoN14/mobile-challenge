apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def gitVersion = 1 // to retrieve git version use: ('git rev-list HEAD --all --count'.toString().execute().text.trim().toInteger())
def appStoreVersion = '1.2.0'

def appVersion = appStoreVersion + "." + gitVersion
def appName = "UnbabelDemoProject"

/** Generate Build Script - Start **/

def createJsonFile(appName, variant, versionName, versionCode) {

    def jFile = String.format("{\"title\":\"%s-%s-%s\",\"versionCode\":%s,\"versionName\":\"%s\"}",
            appName, variant.flavorName.toUpperCase(), versionName, versionCode, versionName)

    File jsonFile = new File(String.format("%s/outputs/apk/%s/%s/info.json",
            project.buildDir, variant.applicationId, versionCode))

    try {
        jsonFile.write(jFile)
    } catch (Exception e) {
        println "write exception: $e"
    }
}

def appendVersionNameVersionCode(appName, variant, defaultConfig) {

    variant.outputs.all { output ->

        def flavor = variant.mergedFlavor

        def versionName = flavor.getVersionName()

        output.outputFileName = String.format("%s-%s-%s.apk",
                appName, variant.flavorName.toUpperCase(), versionName)
    }

    variant.getAssembleProvider().configure() {
        it.doLast {
            def flavor = variant.mergedFlavor
            def versionCode = flavor.getVersionCode()
            def newFilePath = String.format("%s/outputs/apk/%s/%s",
                    project.buildDir, variant.applicationId, versionCode)

            def outputFile = variant.getPackageApplicationProvider().get().outputs.files[1]
            copy {
                from outputFile
                into newFilePath
            }

            println "outputFile: " + outputFile
            println "newFilePath: " + newFilePath

            def versionName = defaultConfig.versionName
            createJsonFile(appName, variant, versionName, versionCode)

            println "app version: " + versionName
        }
    }

}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"
    defaultConfig {
        applicationId "pt.unbabel.demo"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode gitVersion
        versionName appVersion
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                appendVersionNameVersionCode(appName, variant, defaultConfig)
            }
        }
    }

    flavorDimensions "version"
    productFlavors {
        "mock" {
            dimension "version"
            applicationIdSuffix ".demo"
        }

        "dev" {
            dimension "version"
            applicationIdSuffix ".demo"
        }

        "qua"{
            dimension "version"
            applicationIdSuffix ".demo"
        }

        "prd"{
            dimension "version"
            versionName = appStoreVersion
            applicationIdSuffix ".full"
        }
    }

    applicationVariants.all { theVariant ->

        def flavor = theVariant.mergedFlavor

        def versionCode = flavor.getVersionCode()
        def versionName = flavor.getVersionName()

        String variantName = String.format("%s%s", theVariant.name.charAt(0).toUpperCase(), theVariant.name.substring(1))

        def name = theVariant.name

        //noinspection GroovyAssignabilityCheck
        task "$name-CreateJsonFile"(dependsOn: String.format("assemble%s", variantName)) {
            createJsonFile(appName, theVariant, versionName, versionCode)
        }
    }
}

ext {
    supportLibraryVersion = '28.0.0'
    archRoomVersion = "1.1.1"
    ankoVersion = "0.10.4"
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Support Libraries dependencies
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibraryVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'androidx.appcompat:appcompat:1.1.0'

    // Room
    implementation "android.arch.persistence.room:runtime:$archRoomVersion"
    kapt "android.arch.persistence.room:compiler:$archRoomVersion"

    // Anko
    implementation "org.jetbrains.anko:anko-common:$ankoVersion"

    // Gson
    implementation 'com.google.code.gson:gson:2.8.5'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'

    // Dependency Injector (Dagger 2)
    implementation 'com.google.dagger:dagger:2.23.1'
    kapt 'com.google.dagger:dagger-compiler:2.23.1'

    // Kotlin dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.1.0'

    // Unit Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
